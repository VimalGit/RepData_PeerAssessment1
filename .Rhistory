head(acsfile)
dim(acsfile)
summary(acsfile)
head(acsfile$ACR)
head(select(acsfile, (SERIALNO, ACR))
head(select(acsfile, (SERIALNO:ACR))
;
head(select(acsfile, (SERIALNO:ACR)))
library(dplyr)
head(select(acsfile, (SERIALNO:ACR)))
filter(acsfile, ACR = 3)
filter(acsfile, ACR == '3')
filter(acsfile, ACR == '3' AND AGS == '6')
filter(acsfile, ACR == '3' and AGS == '6')
filter(acsfile, ACR == '3' & AGS == '6')
which(acsfile$ACR == '3' and acsfile$AGS == '6')
which(acsfile$ACR == '3' & acsfile$AGS == '6')
dim(acsfile)
agricultureLogical <- which(acsfile$ACR == '3' & acsfile$AGS == '6')
which(agricultureLogical)
head (agricultureLogical)
agricultureLogical <- acsfile[ACR == '3']
agricultureLogical <- acsfile[acsfile$ACR == '3']
agricultureLogical <- acsfile[acsfile$ACR == '3']
agricultureLogical <- acsfile$ACR == '3'
agricultureLogical
agricultureLogical <- acsfile$ACR == '3'& acsfile$AGS == '6'
agricultureLogical
acsfile(which(agricultureLogical))
acsfile[which(agricultureLogical)]
acsfile[which(agricultureLogical) == TRUE]
head(acsfile)
head(acsfile)
acsfile$SERIALNO[which(agricultureLogical) == TRUE]
acsfile[which(agricultureLogical) == TRUE]
dim(acsfile)
dim(agricultureLogical)
summary(agricultureLogical)
acsfile[which(agricultureLogical) == TRUE]
acstrue <- acsfile[which(agricultureLogical) == TRUE]
acstrue
acstrue <- acsfile[,which(agricultureLogical) == TRUE]
acstrue
acstrue <- acsfile[which(agricultureLogical) == TRUE,\]
acstrue <- acsfile[which(agricultureLogical) == TRUE,]
acstrue
acstrue <- acsfile[which(agricultureLogical) == TRUE]
acstrue
acstrue <- acsfile$SERIALNO[which(agricultureLogical) == TRUE]
acstrue
acstrue <- acsfile$SERIALNO[which(agricultureLogical) = TRUE]
acstrue <- acsfile$SERIALNO[which(agricultureLogical)]
dim(acstrue)
summary(acstrue)
acstrue
head(acstrue)
head(acsfile)
acstrue <- acsfile[which(agricultureLogical)]
acstrue <- acsfile$SERIALNO[which(agricultureLogical)]
agricultureLogical
acstrue <- acsfile[which(agricultureLogical)]
acstrue <- acsfile$SERIALNO[which(agricultureLogical)]
acstrue
acstrue <- acsfile$[which(agricultureLogical)]
acstrue <- acsfile[which(agricultureLogical)]
agricultureLogical
head(agricultureLogical)
which(agricultureLogical)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg", destfile = "jeff.jpg")
install.packages("jpeg")
library(jpeg)
jeffjpg <- readJPEG("jeff.csv", native = TRUE)
jeffjpg <- readJPEG("jeff.jpg", native = TRUE)
jeffjpg <- readJPEG("jeff.csv", native = TRUE)
jeffjpg <- readJPEG("jeff.jpg", native = TRUE)
quantile(jeffjpg)
quantile(jeffjpg, probs = seq(30,80))
quantile(jeffjpg, probs = seq(.30,.80))
quantile(jeffjpg, probs = seq(.30))
quantile(jeffjpg, probs = seq(.30))
quantile(jeffjpg, probs = seq(.30, .80))
quantile(jeffjpg, probs = seq(0,1))
quantile(jeffjpg, probs = seq(0,0.3, 1))
quantile(jeffjpg, probs = c(0, 0.3, 1))
quantile(jeffjpg, probs = c(0.3, 0.8))
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg", destfile = "jeff.jpg", mode = "wb")
jeffjpg <- readJPEG("jeff.jpg", native = TRUE)
quantile(jeffjpg, probs = c(0.3, 0.8))
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv", destfile = "GDP.csv", mode = "wb")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv", destfile = "EDU.csv", mode = "wb")
GDP <- read.csv("GDP.csv")
EDU <- read.csv("EDU.csv")
str(GDP)
str(EDU)
head(GDP)
GDP <- read.csv("GDP.csv", header = TRUE)
EDU <- read.csv("EDU.csv", header = TRUE)
str(GDP)
head(GDP)
GDP <- read.csv("GDP.csv", header = TRUE)
head(GDP)
head(EDU)
join()
dplyr
mergeddata <- merge(GDP, EDU, by.x = GDP$X, by.y = EDU$CountryCode)
tail(GDP)
GDP <- read.csv("GDP.csv", header = TRUE)
tail(GDP)
mergeddata <- merge(GDP, EDU, by.x = GDP$X, by.y = EDU$CountryCode)
GDP <- read.csv("GDP.csv", header = TRUE)
mergeddata <- merge(GDP, EDU, by.x = GDP$X, by.y = EDU$CountryCode)
mergeddata <- merge(GDP, EDU, by.x = GDP$CountryCode, by.y = EDU$CountryCode)
mergeddata <- merge(GDP, EDU, by.x = "CountryCode", by.y = "CountryCode")
dim(mergeddata)
mergeddata <- merge(GDP, EDU, by.x = "CountryCode", by.y = "CountryCode", all = TRUE)
dim(mergeddata)
mergeddata <- merge(GDP, EDU, by.x = "CountryCode", by.y = "CountryCode")
mergeddata <- merge(GDP, EDU, by.x = "CountryCode", by.y = "CountryCode")
dim(mergeddata)
GDPSort <- arrange(GDP, desc(GDP$Ranking))
GDPSort <- arrange(GDP, desc(as.numeric(GDP$Ranking)))
GDPSort
GDPSort[.13]
GDPSort[,13]
GDPSort[13,]
dim(mergeddata)
mergeddata
str(mergeddata)
head(mergedata, n=2)
head(mergeddata, n=2)
countofcountry <- is.na(mergeddata$CountryCode)
dim(countofcountry)
filteredmergeddata <- mergeddata[countofcountry]
filteredmergeddata <- mergeddata[which(countofcountry)]
head(filteredmergeddata)
filteredmergeddata <- mergeddata[!which(countofcountry)]
head(filteredmergeddata)
countofcountry <- !is.na(mergeddata$CountryCode)
filteredmergeddata <- mergeddata[which(countofcountry)]
filteredmergeddata <- mergeddata[countofcountry]
filteredmergeddata <- mergeddata[which(countofcountry)]
filteredmergeddata <- GDP[which(countofcountry)]
str(mergeddata)
filteredmergeddata <- mergeddata$CountryCode[which(countofcountry)]
head(filteredmergeddata)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv", destfile = "GDP.csv", mode = "wb")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv", destfile = "EDU.csv", mode = "wb")
GDP <- read.csv("GDP.csv")
EDU <- read.csv("EDU.csv")
head(GDP)
head(EDU)
mergeddata <- merge(GDP, EDU, by.x = "X", by.y = "CountryCode")
mergeddata <- merge(GDP, EDU, by.x = "X", by.y = "CountryCode", all = FALSE)
mergeddata <- merge(GDP, EDU, by.x = "X", by.y = "CountryCode", all = TRUE)
mergeddata <- merge(GDP, EDU, by.x = "X", by.y = "CountryCode", all = FALSE)
mergeddata
head(mergeddata, n = 1)
missingvalues <- is.na(mergeddata$X)
missingvalues <- !is.na(mergeddata$X)
goodmergeddata <- mergeddata[missingvalues]
goodmergeddata <- subset.data.frame(goodmergeddata, !is.na(mergeddata$X))
goodmergeddata <- subset.data.frame(mergeddata, !is.na(mergeddata$X))
goodmergeddata <- subset.data.frame(mergeddata, !is.na(mergeddata$X), drop = TRUE)
mergeddata <- merge(EDU, GDP, by.x = "CountryCode", by.y = "X", all = FALSE)
mergeddata <- merge(GDP, EDU, by.x = "X", by.y = "CountryCode", all = FALSE)
goodmergeddata <- subset(mergeddata, !is.na(mergeddata$X))
View(goodmergeddata)
EDU_clean <- sub(EDU, !is.na(EDU$CountryCode))
EDU_clean <- subset(EDU, !is.na(EDU$CountryCode))
GDP_clean <- subset(GDP, !is.na(GDP$X))
GDP_clean <- subset(GDP, !is.nan(GDP$X))
GDP_clean <- subset(GDP, !is.nan(GDP$X), drop = TRUE)
head(GDP)
GDP_clean <- na.omit(GDP)
GDP_clean <- na.omit(GDP$X)
GDP <- read.csv("GDP.csv", stringsAsFactors = FALSE)
head(GDP)
clean_GDP <- na.omit(GDP)
clean_GDP <- na.omit(GDP$X)
head(clean_GDP)
complete.cases(GDP)
complete.cases(GDP$X)
GDP <- read.csv("GDP.csv", colClasses = c(X))
GDP <- read.csv("GDP.csv", colClasses = c('X'))
GDP <- read.csv("GDP.csv", na.strings = "")
head(GDP)
EDU <- read.csv("EDU.csv", na.strings = "")
mergeddata <- merge(GDP, EDU, by.x = "X", by.y = "CountryCode")
cleanEDU <- na.omit(EDU)
cleanEDU <- GDP[!is.na(GDP$X)]
nonnaGDP <- !is.na(GDP$X)
cleanEDU <- GDP[nonnaGDP]
cleanEDU <- GDP$X[nonnaGDP]
head(cleanEDU)
cleanEDU <- subset(GDP, nonnaGDP)
head(cleanEDU)
cleanGDP <- subset(GDP, nonnaGDP)
mergeddata <- merge(CleanGDP, EDU, by.x = "X", by.y = "CountryCode")
mergeddata <- merge(cleanGDP, EDU, by.x = "X", by.y = "CountryCode")
nonnaEDU <- !is.na(EDU$CountryCode)
cleanEDU <- subset(EDU, nonnaEDU)
mergeddata <- merge(cleanGDP, cleanEDU, by.x = "X", by.y = "CountryCode")
library(sqldf)
head(GDP)
cleanGDP <- subset(cleanGDP, !is.na(cleanGDP$Gross.domestic.product.2012))
mergeddata <- merge(cleanGDP, cleanEDU, by.x = "X", by.y = "CountryCode")
summarize(mergeddata, group_by(mergeddata$Income.Group), mean(mergeddata$)asdgasdg)
head(mergeddata)
head(mergeddata. n=1)
head(mergeddata, n=1)
summarize(mergeddata, group_by(mergeddata$Income.Group), mean(mergeddata$X.3))
summarize(group_by(mergeddata$Income.Group), mean(mergeddata$X.3))
summarize(group_by(mergeddata, mergeddata$Income.Group), mean(mergeddata$X.3))
summarize(group_by(mergeddata, mergeddata$Income.Group), mean(as.numeric(mergeddata$X.3)))
by_income_type <- group_by(mergeddata, ,mergeddata$Income.Group)
group_by(mergeddata, mergeddata$Income.Group)
temp <- group_by(mergeddata, mergeddata$Income.Group)
temp
temp <- group_by(mergeddata, mergeddata$"Income.Group"")
;
/
temp <- group_by(mergeddata, mergeddata$"Income.Group")
summarize(group_by(mergeddata, mergeddata$"Income.Group"), mean(mergeddata$X.3))
summarize(group_by(mergeddata, mergeddata$"Income.Group"), mean(as.numeric(mergeddata$X.3)))
summarize(group_by(mergeddata, mergeddata$"Income.Group"), mean(as.numeric(mergeddata$"X.3")))
summarize(group_by(mergeddata, mergeddata$"Income.Group"), mean(mergeddata$"X.3"))
summarize(group_by(mergeddata, mergeddata$"Income.Group"), mean(as.numeric(mergeddata$Gross.domestic.product.2012)))
summarize(group_by(mergeddata, mergeddata$"Income.Group"), mean(as.numeric(mergeddata$"Gross.domestic.product.2012")))
summarize(group_by(mergeddata, mergeddata$"Income.Group"))
head(mergeddata$Gross.domestic.product.2012)
head(mergeddata)
head(mergeddata. n=2)
head(mergeddata, n=2)
head(mergeddata$Gross.domestic.product.2012)
summarize(group_by(mergeddata, mergeddata$"Income.Group"), mean(mergeddata$"Gross.domestic.product.2012"))
summarize(group_by(mergeddata, mergeddata$"Income.Group"), mean(as.numeric(mergeddata$"Gross.domestic.product.2012")))
aggregate.data.frame(mergeddata, by = mergeddata$"Income.Group", FUN = mean(mergeddata$"Gross.domestic.product.2012"))
aggregate.data.frame(mergeddata, by = mergeddata$"Income.Group", FUN = mean(as.numeric(mergeddata$"Gross.domestic.product.2012")))
aggregate.data.frame(mergeddata, by = mergeddata$"Income.Group", mean(as.numeric(mergeddata$"Gross.domestic.product.2012")))
aggregate.data.frame(mergeddata, by = mergeddata$"Income.Group", FUN = "mean(as.numeric(mergeddata$"Gross.domestic.product.2012")"))
aggregate.data.frame(mergeddata, by = mergeddata$"Income.Group", FUN = "mean(as.numeric(mergeddata$'Gross.domestic.product.2012')"))
sqldf("select 'Income.Group', avg('Gross.domestic.product.2012') from mergeddata group by 'Income.Group'")
sqldf("select Income.Group, avg('Gross.domestic.product.2012') from mergeddata group by Income.Group")
sqldf("select \"Income.Group\", avg(\"Gross.domestic.product.2012\") from mergeddata group by \"Income.Group\"")
quantile(mergeddata$Gross.domestic.product.2012)
quantile(mergeddata)
quantile(mergeddata, probs=seq(1:5))
quantile(mergeddata, probs=seq(1:5), na.rm = TRUE)
quantile(mergeddata, probs=c(1:5), na.rm = TRUE)
quantile(mergeddata, , na.rm = TRUE)
quantile(mergeddata, na.rm = TRUE)
quantile(mergeddata$"Gross.domestic.product.2012", na.rm = TRUE)
quantile(as.numeric(mergeddata$"Gross.domestic.product.2012"), na.rm = TRUE)
quantile(as.numeric(mergeddata$"Gross.domestic.product.2012"))
summarize(group_by(mergeddata, mergeddata$"Income.Group"), quantile(as.numeric(mergeddata$"Gross.domestic.product.2012")))
summarize(group_by(mergeddata, quantile(as.numeric(mergeddata$"Gross.domestic.product.2012")))
summarize(group_by(mergeddata, quantile(as.numeric(mergeddata$"Gross.domestic.product.2012"))))
group_by(mergeddata, quantile(as.numeric(mergeddata$"Gross.domestic.product.2012")))
quantile(mergeddata$"Gross.domestic.product.2012", na.rm = TRUE)
quantile(as.numeric(mergeddata$"Gross.domestic.product.2012"), na.rm = TRUE)
sqldf("select \"Income.Group\", count(*) from mergeddata group by \"Income.Group\"")
quantile(as.numeric(mergeddata$"Gross.domestic.product.2012"), na.rm = TRUE)
quantile(as.numeric(mergeddata$"Gross.domestic.product.2012"),probs=c(.2, .4, .6, .8, 1), na.rm = TRUE)
quantile(as.numeric(mergeddata$"Gross.domestic.product.2012"),probs=c(.2, .4, .6, .8, 1), na.rm = TRUE, names = TRUE)
quantile(as.numeric(mergeddata$"Gross.domestic.product.2012"),probs=c(.2, .4, .6, .8, 1), na.rm = TRUE, names = FALSE)
quantile(as.numeric(mergeddata$"Gross.domestic.product.2012"),probs=c(.2, .4, .6, .8, 1), na.rm = TRUE, names = TRUE)
data.frame
quantile(as.numeric(mergeddata$"Gross.domestic.product.2012"),probs=c(.2, .4, .6, .8, 1), na.rm = TRUE, names = TRUE)
dataqnt <- quantile(as.numeric(mergeddata$"Gross.domestic.product.2012"),probs=c(.2, .4, .6, .8, 1), na.rm = TRUE, names = TRUE)
dataqnt
mergeddata[dataqnt]
subset(mergeddata, dataqnt)
quantile(as.numeric(mergeddata$"Gross.domestic.product.2012"),probs=c(.8, 1), na.rm = TRUE, names = TRUE)
quantile(as.numeric(mergeddata$"Gross.domestic.product.2012"),probs=c(.8:1), na.rm = TRUE, names = TRUE)
quantile(as.numeric(mergeddata$"Gross.domestic.product.2012"),probs=c(1), na.rm = TRUE, names = TRUE)
quantile(as.numeric(mergeddata$"Gross.domestic.product.2012"),probs=c(1:0.8), na.rm = TRUE, names = TRUE)
quantile(as.numeric(mergeddata$"Gross.domestic.product.2012"),probs=c(-(0:.8),1), na.rm = TRUE, names = TRUE)
quantile(as.numeric(mergeddata$"Gross.domestic.product.2012"),probs=c(.8:1), na.rm = TRUE, names = TRUE)
quantile(as.numeric(mergeddata$"Gross.domestic.product.2012"),probs=c(.8), na.rm = TRUE, names = TRUE)
quantile(as.numeric(mergeddata$"Gross.domestic.product.2012"),probs=c(1), na.rm = TRUE, names = TRUE)
quantile(as.numeric(mergeddata$"Gross.domestic.product.2012"),probs=c(0.2), na.rm = TRUE, names = TRUE)
quantile(as.numeric(mergeddata$"Gross.domestic.product.2012"),probs=c(.8, 1), na.rm = TRUE, names = TRUE)
dataqnt <- quantile(as.numeric(mergeddata$"Gross.domestic.product.2012"),probs=c(.2, .4, .6, .8, 1), na.rm = TRUE, names = TRUE)
dataqnt
cut(mergeddata)
cut(mergeddata$Income.Group, breaks = dataqnt)
cut(mergeddata$"Gross.domestic.product.2012", breaks = dataqnt)
cut(as.numeric(mergeddata$"Gross.domestic.product.2012"), breaks = dataqnt)
aftercut <- cut(as.numeric(mergeddata$"Gross.domestic.product.2012"), breaks = dataqnt)
head(aftercut)
table(aftercut)
ddataqnt
dataqnt
aftercut <- cut(as.numeric(mergeddata$"Gross.domestic.product.2012"), breaks = dataqnt, include.lowest = TRUE)
aftercut
table(aftercut)
dataqnt
install.packages("hmisc")
install.packages("Hmisc")
library(Hmisc)
aftercut <- cut2(as.numeric(mergeddata$"Gross.domestic.product.2012"), c(g=5))
aftercut
head(aftercut)
aftercut <- cut2(as.numeric(mergeddata$"Gross.domestic.product.2012"), g=5)
aftercut
head(aftercut)
summary(aftercut)
table(aftercut)
aftercut <- cut(as.numeric(mergeddata$"Gross.domestic.product.2012"), breaks = dataqnt, include.lowest = TRUE)
table(aftercut)
dataqnt
aftercut <- cut(as.numeric(mergeddata$"Gross.domestic.product.2012"), breaks = dataqnt, include.lowest = TRUE, right=TRUE)
table(aftercut)
aftercut <- cut(as.numeric(mergeddata$"Gross.domestic.product.2012"), 5, include.lowest = TRUE, right=TRUE)
table(aftercut)
head(mergeddata, n=1)
temp <- mutate(mergeddata, aftercut)
temp
head(mergeddata)
head(mergeddata, n=1)
temp <- mutate(mergeddata, quantile = aftercut)
head(mergeddata, n=1)
summary(mergeddata)
str(mergeddata)
temp <- mutate(mergeddata$X.2, quantile = aftercut)
temp <- mutate(mergeddata$X.2, quantile = aftercut)
temp <- mutate(mergeddata$"X.2", quantile = aftercut)
temp <- mutate(mergeddata, quantile = aftercut)
temp$quantile
temp2 <- c(mergeddata$X.2, temp$quantile)
temp2
head(temp2)
temp2 <- data.frame(c(mergeddata$X.2, temp$quantile))
temp2
temp2 <- data.frame(c(mergeddata$X, temp$quantile))
temp2
str(mergeddata)
str(temp2)
temp2 <- data.frame(mergeddata$X, temp$quantile)
temp2
group_by(temp2, temp2$temp.quantile)
sqldf("select * from temp2 where temp2$quantile = max(temp2$quantile"))
sqldf("select * from temp2 where temp2$quantile = max(temp2$quantile)")
str(temp2)
sqldf("select * from temp2 where temp$quantile = max(temp$quantile)")
sqldf("select * from temp2 where temp.quantile = max(temp.quantile)")
str(temp2)
head(temp2, n=1)
sqldf("select * from temp2 where \"temp.quantil" = max(\"temp.quantile\")")
sqldf("select * from temp2 where \"temp.quantile\" = max(\"temp.quantile\")")
sqldf("select * from temp2 where \"temp.quantile\" = (select max(\"temp.quantile\") from temp2")
sqldf("select * from temp2 where \"temp.quantile\" = (select max(\"temp.quantile\") from temp2"))
?filter
temp2
order(temp2, temp2$temp.quantile)
order(temp2$temp.quantile)
temp2[order(temp2$temp.quantile)]
sqldf("select * from temp2 where \"temp.quantile\" = (select max(\"temp.quantile\") from temp2"))
names(temp2)
names(temp2) <- c('country', 'quantile')
names(temp2)
head(temp2)
sqldf("select * from temp2 where country = (select max(quantile) from temp2"))
sqldf("select * from temp2 where country = (select max(quantile) from temp2")
sqldf("select * from temp2 where quantile = (select max(quantile) from temp2"))
sqldf("select max(quantile) from temp2")
temp2
str(temp2)
sqldf("select max(quantile) from temp2")
sqldf("select temp2.country, temp2.quantile. mergeddata$"Income.Group"" from temp2, mergeddata")
sqldf("select temp2.country, temp2.quantile. mergeddata$\"Income.Group\" from temp2, mergeddata")
sqldf("select temp2.country, temp2.quantile, mergeddata$\"Income.Group\" from temp2, mergeddata")
str(mergeddata)
sqldf("select distinct temp2$\"Income.Group" from temp2)
sqldf("select distinct temp2$\"Income.Group\" from temp2)
sqldf("select distinct temp2$\"Income.Group\" from temp2")
str(temp2)
sqldf("select distinct mergeddata$\"Income.Group\" from temp2")
sqldf("select distinct mergeddata$\"Income.Group\" from mergeddata")
str(mergeddata)
sqldf("select distinct mergeddata$\"Income.Group\" from mergeddata")
sqldf("select distinct mergeddata$Income.Group from mergeddata")
sqldf("select distinct mergeddata$\'Income.Group\' from mergeddata")
sqldf("select distinct mergeddata$\"Income.Group\" from mergeddata")
sqldf("select  mergeddata$\"Income.Group\" from mergeddata")
sqldf("select * from temp2 where temp2$quantile = max(temp2$quantile"))
sqldf("select \"Income.Group\", count(*) from mergeddata group by \"Income.Group\"")
sqldf("select CountryCode from mergeddata where \"Income.Group\" == 'Lower middle income'")
str(mergeddata)
sqldf("select X from mergeddata where \"Income.Group\" == 'Lower middle income'")
mid_income <- sqldf("select X from mergeddata where \"Income.Group\" == 'Lower middle income'")
mid_income
sqldf("select * from temp2")
?filter
high_gdp <- filter(temp2, quantile == '(152, 190]')
high_gdp
str(emp2)
str(temp2)
high_gdp <- filter(temp2, quantile == (152, 190])
high_gdp <- filter(temp2, quantile == 152, 190)
high_gdp <- filter(temp2, as.character(quantile) == '(152, 190]')
high_gdp
sqldf("select * from temp2 where quantile='(152, 190]'")
sqldf("select * from temp2 where quantile=like '%190%'")
sqldf("select * from temp2 where quantile like '%190%'")
high_gdp <- sqldf("select * from temp2 where quantile like '%190%'")
high_gdp
mid_income
names(mid_income)
names(mid_income) <- c('country')
names(mid_income)
names(high_gdp)
join(high_gdp, merged_income)
?join
library(plyr)
library(plyr)
library(dplyr)
join(high_gdp, merged_income)
join(high_gdp, mid_income)
high_gdp
mid_income
join(high_gdp, mid_income, type="inner")
Sys.setenv(SPARK_HOME = "C:\spark-1.5.0-bin-hadoop2.6")
Sys.setenv(SPARK_HOME = "C:/spark-1.5.0-bin-hadoop2.6")
.libPaths(c(file.path(Sys.getenv(SPARK_HOME), "R", "lib"), .libPaths()))
.libPaths(c(file.path(Sys.getenv("SPARK_HOME"), "R", "lib"), .libPaths()))
library(SparkR)
sc <- sparkR.init(master="local")
sqlContext <- sparkRSQL.init(sc)
DF <- createDataFrame(sqlContext, faithful)
head(DF)
faithful
localDF <- data.frame(name=c("vimal", "vijay", "ajith"), age=c(39, 41, 43))
localDF
printSchema(localDF)
df <- createDataFrame(sqlContext, localDF)
printSchema(localDF)
printSchema(df)
path <- file.path(Sys.getenv("SPARK_HOME"), "examples/src/main/resources/people.json")
peopleDF <- jsonFile(sqlContext, path)
peopleDF
peopleDF.show
printSchema(peopleDF)
head(peopleDF)
registerTempTable(peopleDF, "people")
teenagers <- sql(sqlContext, "select * from people")
teenagers
teenagers.show()
View(teenagers)
teenagersLocalDF <- collect(teenagers)
teenagersLocalDF
print(teenagersLocalDF)
library(datasets)
hist(airquality$Ozone)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(datasets)
data(airquality)
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + geom_smooth()
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality)
qplot(Wind, Ozone, data = airquality, geom = "smooth")
qplot(Wind, Ozone, data = airquality, geom = "smooth")
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
iris
library(ggvis)
install.packages("ggvis")
library(ggvis)
iris %>% ggvis(~Sepal.Length, ~Sepal.Width, fill=~Species) %>% layer_points()
iris
iris %>% ggvis(~Sepal.Length, ~Sepal.Width, fill=~Species) %>% layer_points()
load(ggvis)
library(ggvis)
iris %>% ggvis(~Sepal.Length, ~Sepal.Width, fill=~Species) %>% layer_points()
iris %>% ggvis(~Petal.Length, ~Petal.Width, fill=~Species) %>% layer_points()
head(iris)
str(iris)
table(iris$Species)
prop.table(table(iris$Species))*100
summary(iris)
library(class)
set.seed(1234)
ind<-sample(2, nrow(iris), replace=TRUE, prob=c(0.67, 0.33))
ind
iris.training<-iris[ind==1, 1:4]
iris.test<-iris[ind==2, 1:4]
iris.training
iris.trainlabels<-iris[ind==1, 5]
iris.testlabels<-iris[ind==2, 5]
iris_pred <- knn(train=iris.training, test=iris.test, cl=iris.trainlabels, k=3)
iris_pred
library(gmodels)
install.package("gmodels")
install.packages("gmodels")
library(gmodels)
CrossTable(x=iris.testlabels, y=iris_pred, prop.chisq=FALSE)
setwd("C:/Users/Vimal/Desktop/temp/bd/ds/coursera/jh/m5")
head(activity)
